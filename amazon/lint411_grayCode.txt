"""
https://www.lintcode.com/problem/gray-code/description
411. Gray Code 
The gray code is a binary numeral system where two successive values differ in only one bit.

Given a non-negative integer n representing the total number of bits in the code, find the sequence of gray code. A gray code sequence must begin with 0 and with cover all 2n integers.

Example
Example 1:

Input: 1
Output: [0, 1]
Example 2:

Input: 2
Output: [0, 1, 3, 2]
Explanation:
  0 - 00
  1 - 01
  3 - 11
  2 - 10
Challenge
O(2n) time.

Notice
For a given n, a gray code sequence is not uniquely defined.

When n=2, both [0,1,3,2] and [0,2,3,1] are valid gray code sequence according to the above definition.


https://www.jiuzhang.com/solution/gray-code/#tag-highlight-lang-python
最简单的做法是利用位运算. 在 计算机组成与设计一书上有介绍. (或者其他相关书籍也有, 笔者在这本书上看到的)

一个数字对应的格雷编码的计算方式是:

将其二进制第一位(从高位数)与0异或, 得到的结果为格雷码的第一位
之后依次将原数的第i位与生成的格雷码第i-1位做异或运算, 即可得到格雷码的第i位.

"""
class Solution:
    """
    @param n: a number
    @return: Gray code
    """
    def grayCode(self, n):
        return [i ^ (i >> 1) for i in range(1 << n)]

################ 递归版本

class Solution:
    # @param {int} n a number
    # @return {int[]} Gray code
    def grayCode(self, n):
        if n == 0:
            return [0]
        
        result = self.grayCode(n - 1)
        seq = list(result)
        for i in reversed(result):
            seq.append((1 << (n - 1)) | i)
            
        return seq



""" 
https://blog.csdn.net/yangjingjing9/article/details/77011857
 【思路】

这道题采用回溯法，因为n位的与n-1位的格雷码是有关系的，前半部分与n-1位的相同。后半部分的由对称的前面那部分加上2^(n-1)。

n = 1--->[0,1]

n = 2--->[0,1,1+2^1,0+2^1] =[0,1,3,2]

n = 3---> [0,1,3,2,2+2^2,3+2^2,1+2^2,0+2^2]= [0,1,3,2,6,7,5,4]
 
"""
class Solution:
    """
    @param n: a number
    @return: Gray code
    """
    # bakc tracking 
    # n = 0 -> [0]
    # n = 1 -> [0, 1]
    # n  2  [0, 1,1 + 2^1, 0+2^0]  = [0132] 
    # n 3   [ 0, 1, 3, 2, 2 + 2^2, 3 + 2^2, 1+2^2, 0 + 2^2]  
    def grayCode(self, n):
        if n < 1: return [0]  
        if n == 1: return [0,1]
        
        res = self.grayCode(n-1)
        digit = pow(2, n-1)    #  add to each of the number in reverse order 
        for i in range(digit-1, -1, -1):
            res.append(res[i] + digit)  
        print(res)
        return res
        
        

 
if __name__ == '__main__':
   S= Solution()
   S.grayCode(3)

 ———————————————— 
版权声明：本文为CSDN博主「toplatona」的原创文章，遵循CC 4.0 by-sa版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/yangjingjing9/article/details/77011857
"""
https://blog.csdn.net/fuxuemingzhu/article/details/80664204
https://blog.csdn.net/yangjingjing9/article/details/77011857

递归生成码表

这种方法基于格雷码是反射码的事实，利用递归的如下规则来构造：

1位格雷码有两个码字
(n+1)位格雷码中的前2n个码字等于n位格雷码的码字，按顺序书写，加前缀0
(n+1)位格雷码中的后2n个码字等于n位格雷码的码字，按逆序书写，加前缀1
n+1位格雷码的集合 = n位格雷码集合(顺序)加前缀0 + n位格雷码集合(逆序)加前缀1
简言之就是递归。第（n+1）位的格雷码序列=（‘0’+第n位的正序） + （‘1’+第n位的逆序）

题目中说了n是非负数，当n=0的时候，返回[0]即可。 
"""
class Solution(object):
    def grayCode(self, n):
        """
        :type n: int
        :rtype: List[int]
        """
        grays = dict()
        grays[0] = ['0']
        grays[1] = ['0', '1']
        for i in range(2, n + 1):
            n_gray = []
            for pre in grays[i - 1]:
                n_gray.append('0' + pre)
            for pre in grays[i - 1][::-1]:
                n_gray.append('1' + pre)
            grays[i] = n_gray
        return map(lambda x: int(x, 2), grays[n]) 
		
class Solution(object):
    def grayCode(self, n):
        """
        :type n: int
        :rtype: List[int]
        """
        return map(lambda x: int(x, 2), self.bit_gray(n))
    
    def bit_gray(self, n):
        ans = None
        if n == 0:
            ans = ['0']
        elif n == 1:
            ans = ['0', '1']
        else:
            pre_gray = self.bit_gray(n - 1)
            ans = ['0' + x for x in pre_gray] + ['1' + x for x in pre_gray[::-1]]
        return ans 