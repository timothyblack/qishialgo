"""
lintcode.com/problem/construct-string-from-binary-tree/description
1137. Construct String from Binary Tree
 
You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way.

The null node needs to be represented by empty parenthesis pair "()". And you need to omit all the empty parenthesis pairs that don't affect the one-to-one mapping relationship between the string and the original binary tree.

Example
Example 1:

Input: Binary tree: [1,2,3,4]
       1
     /   \
    2     3
   /    
  4     

Output: "1(2(4))(3)"

Explanation: Originallay it needs to be "1(2(4)())(3()())", 
but you need to omit all the unnecessary empty parenthesis pairs. 
And it will be "1(2(4))(3)".
Example 2:

Input: Binary tree: [1,2,3,null,4]
       1
     /   \
    2     3
     \  
      4 

Output: "1(2()(4))(3)"

Explanation: Almost the same as the first example, 
except we can't omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.
https://www.jiuzhang.com/solution/construct-string-from-binary-tree/#tag-highlight-lang-python
"""
 


"""
二叉树的遍历。
类似于树的前序遍历，只需在遍历时在左子树和右子树最外面加一对括号即可。
注意如果右子树为空，则右子树不需要加括号；若左子树为空而右子树非空，则需要在右子树前加一对空括号表示左子树。
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param t: the root of tree
    @return: return a string
    """
    def tree2str(self, t):
        s = str(t.val) 
        hasLeft = False
        if t.left is not None: 
            hasLeft = True
            s += "(" + self.tree2str(t.left) + ")" 
        if t.right is not None:
            if not hasLeft:  # if right sub tree is not null, and no left sub tree, add () 
                s += "()"
            s += "(" + self.tree2str(t.right) + ")" 
        return s
        
