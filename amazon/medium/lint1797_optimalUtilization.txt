"""
https://www.lintcode.com/problem/optimalutilization/description
1797. optimalUtilization 
Give two sorted arrays. To take a number from each of the two arrays, the sum of the two numbers needs to be less than or equal to k, and you need to find the index combination with the largest sum of the two numbers. Returns a pair of indexes containing two arrays. If you have multiple index answers with equal sum of two numbers, you should choose the index pair with the smallest index of the first array.

The sum of the two numbers <= k
The sum is the biggest
Both array indexes are kept to a minimum
Example
Example1

A = [1, 4, 6, 9], B = [1, 2, 3, 4], K = 9
return [2, 2]
Example2:

Input: 
A = [1, 4, 6, 8], B = [1, 2, 3, 5], K = 12
Output:
[2, 3]
"""

# 雙指針，第一個while可以保證sum最大還有第一個index最小
# 第二個while確保第二個index最小
class Solution:
    """
    @param A: a integer sorted array
    @param B: a integer sorted array
    @param K: a integer
    @return: return a pair of index
    """
    def optimalUtilization(self, A, B, K):
        if len(A) == 0 or len(B) == 0: return []
        left, right = 0, len(B) - 1 
        maxsum = -sys.maxsize 
        lidx = len(A)
        ridx = len(B)
        while left<len(A) and right >= 0:
            val = A[left] + B[right]
            if val == K:
                return [left, right]
            elif val > K:
                right -= 1 
            else:  # val < k    
                if val > maxsum:
                    maxsum = val
                    lidx = left 
                    ridx = right 
                left += 1     
        
        while ridx > 0 and B[ridx] == B[ridx - 1]:
            ridx -= 1 
        return [lidx, ridx]  
        
                