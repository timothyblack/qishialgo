"""


https://www.lintcode.com/problem/intersection-of-two-linked-lists/description
80. Intersection of Two Linked Lists
中文English
Write a program to find the node at which the intersection of two singly linked lists begins.

Example
Example 1:

Input:
	A:          a1 → a2
	                   ↘
	                     c1 → c2 → c3
	                   ↗            
	B:     b1 → b2 → b3
Output: c1
Explanation ：begin to intersect at node c1.
Example 2:

Input:
Intersected at 6
1->2->3->4->5->6->7->8->9->10->11->12->13->null
6->7->8->9->10->11->12->13->null
Output: Intersected at 6
Explanation：begin to intersect at node 6.
Challenge
Your code should preferably run in O(n) time and use only O(1) memory.

Notice
If the two linked lists have no intersection at all, return null.
The linked lists must retain their original structure after the function returns.
You may assume there are no cycles anywhere in the entire linked structure.

"""
"""
Definition of ListNode
class ListNode(object):
    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""
# https://www.jiuzhang.com/solution/intersection-of-two-linked-lists/ 
"""
Definition of ListNode
class ListNode(object):
    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""

class Solution:
    """
    @param headA: the first list
    @param headB: the second list
    @return: a ListNode
    """
    def getIntersectionNode(self, headA, headB):
        # get len of each List  
        if headA is None or headB is None: return None
        lenA, lenB = 0, 0 
        nodeA, nodeB = headA, headB 
        while nodeA is not None:
            lenA += 1 
            nodeA = nodeA.next 
        
        while nodeB is not None:
            lenB += 1 
            nodeB = nodeB.next 
        
        nodeA, nodeB = headA, headB 
        while lenA > lenB: 
            nodeA = nodeA.next
            lenA -= 1 
        while lenB > lenA:
            nodeB = nodeB.next 
            lenB -= 1 
        while nodeA is not nodeB:
            nodeA = nodeA.next 
            nodeB = nodeB.next 
        
        return nodeA 
        