"""
https://www.lintcode.com/problem/shortest-path-to-the-destination/description
1563. Shortest path to the destination
中文English
Given a 2D array representing the coordinates on the map, there are only values 0, 1, 2 on the map. value 0 means that it can pass, value 1 means not passable, value 2 means target place. Starting from the coordinates [0,0],You can only go up, down, left and right. Find the shortest path that can reach the destination, and return the length of the path.

Example
Example 1

Input:
[
 [0, 0, 0],
 [0, 0, 1],
 [0, 0, 2]
]
Output: 4
Explanation: [0,0] -> [1,0] -> [2,0] -> [2,1] -> [2,2]
Example 2

Input:
[
    [0,1],
    [0,1],
    [0,0],
    [0,2]
]
Output: 4
Explanation: [0,0] -> [1,0] -> [2,0] -> [3,0] -> [3,1]
Notice
1.The map must exist and is not empty, there is only one target

https://www.jiuzhang.com/solution/shortest-path-to-the-destination/#tag-highlight-lang-python

BFS   
simlar to word ladder   
add (x, y) to q,  need distance hashmap,  distance[(nx, ny)] =  distance[(x, y)] + 1 

"""

from collections import deque
class Solution:
    """
    @param targetMap: 
    @return: nothing
    """
    def shortestPath(self, targetMap):
        m = len(targetMap)
        n = len(targetMap[0])
        queue = deque([(0, 0)])   #  note deque takes iterable 
        distance = {(0, 0): 0}   # hashmap cord: distance 
        dirs = [(0, 1),(0, -1), (1, 0),(-1, 0)]
        while queue: 
            x, y = queue.popleft() 
            for dx, dy in dirs:  
                nx, ny = x + dx, y + dy 
                if nx <0 or nx >= m or ny < 0 or ny >= n or targetMap[nx][ny] == 1 or (nx, ny) in distance: 
                    continue 
                queue.append((nx, ny))
                distance[(nx, ny)] =  distance[(x, y)] + 1 
                if targetMap[nx][ny] == 2: 
                    return distance[(nx, ny)] 
        
        return -1   
